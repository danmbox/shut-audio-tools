#!/usr/bin/env bash
set -e; set -u

# Copyright (C) 2010-2011 Dan Muresan
# Part of shut-audio-tools (http://danmbox.github.com/shut-audio-tools/)

# initially based on "acpo" in sox.1
# bash used for <() syntax only -- faster execution

MYNAME=${0##*/}; MYVERSION="1.0"

printusage () {
cat <<EOF
Usage: $MYNAME [OPTIONS] OUT FILE1
         [-v VOL1] POS1 [-v VOL2] FILE2 POS2 [EXC LEE] -- [SOXFX...]
  or:  $MYNAME { -h | --help | -? | --version }

Joins (splices) audio files using sox.

  -t | -q | -c  sets the sox splice envelope (-c replacing sox's -h)
  -v VOL        sets the gain (linear) for each file

Positions, as well as the excess EXC and the leeway LEE, can be specified
(sox-style) as mm:ss.frac or <NSAMPLES>s. The result consists of

  + (POS1 - 2 * EXC)  of FILE1
  + (2 * EXC)         of cross-fade between FILE1 and FILE2
  + (LEN2 - POS2)     of FILE2 (i.e. everything after POS2)

If FILE2 is "", it defaults to FILE1. SOXFX arguments specify extra sox
effects (performed after the splice). See sox(1).

Report bugs at https://github.com/danmbox/shut-audio-tools/issues
EOF
}

printversion () {
cat <<EOF
$MYNAME version $MYVERSION
Copyright (C) 2010-2011 Dan Muresan
EOF
}

t2samples () {
  perl -we 'use strict; my ($t, $rate) = @ARGV;
die unless $t =~ m@^((\d+)[:])?(\d+)([.]\d+)?@;
my $mm = $2; if (! defined ($mm)) { $mm = 0 };
my $ff = $4; if (! defined ($ff)) { $ff = 0 };
print STDOUT int (($mm * 60 + $ff + $3) * $rate);
' "$1" "$rate"
}
opts () {
  printf '%s' '-t raw '; audioflags --sox "$1"
}
insamples () {
  test "X${1%s}" != "X$1"
}

ENVEL="-t"
while test $# -gt 0; do case "$1" in
  -h|--help|"-?") printusage; exit ;;
  --version) printversion; exit ;;  
  -t|-q) ENVEL="$1"; shift ;;
  -c) ENVEL="$-h"; shift ;;
  *) break ;;
esac; done

out="$1"; shift; test -e "$out" && { echo "Not overwriting $out"; exit 1; }
test "X$1" = "X-v" && { v1="$1 $2"; shift 2; }
f1="$1"; shift; rate=`soxi -r "$f1"`; opt=`opts "$f1"`
p1="$1"; shift; test -z "$p1" && p1=`soxi -s "$f1"`s
test "X$1" = "X-v" && { v2="$1 $2"; shift 2; }
f2="$1"; shift; test -z "$f2" && f2="$f1"; opt2=`opts "$f2"`
test "X$opt" = "X$opt2" || { echo "Incompatible files"; exit 1; }
exc="${2:-0.005}"; insamples "$exc" || exc=`t2samples "$exc"`s
lee="${3:-0.005}"; insamples "$lee" || lee=`t2samples "$lee"`s
p2="${1:-}"; test -z "$p2" && p2=`expr "${lee%s}" '+' "${exc%s}"`s
{ test $# -gt 3 && shift 4; } || while $# -gt 0; do shift; done
insamples "$p1" || p1=`t2samples "$p1"`s
insamples "$p2" || p2=`t2samples "$p2"`s

o2=`expr "${p2%s}" '-' 2 '*' "${exc%s}" '-' "${lee%s}"`s

sox $opt <(sox ${v1-} "$f1" $opt - trim 0 "$p1") \
    $opt <(sox ${v2-} "$f2" $opt - trim "$o2")   \
    "$out" splice "$ENVEL" "$p1,$exc,$lee" "$@"
